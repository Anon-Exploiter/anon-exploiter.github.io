<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Umar_0x01 – Pentester | Programmer | Your average sakurity guy ( ͡~ ͜ʖ ͡°)</title>
    
    
    
    <link>https://umar0x01.sh/post/</link>
    <description>Recent content in Posts on Umar_0x01 – Pentester | Programmer | Your average sakurity guy ( ͡~ ͜ʖ ͡°)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://umar0x01.sh/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SUID Enumeration/Exploitation - The Automated Way!</title>
      <link>https://umar0x01.sh/post/suid-enumeration/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://umar0x01.sh/post/suid-enumeration/</guid>
      <description>
        
          &lt;img src=&#34;https://umar0x01.sh/img/screenshot_10.png&#34;/&gt;
          
        
        
        &lt;h2 id=&#34;what-the-heck-is-suid-enum&#34;&gt;What the heck is SUID ENUM!?&lt;/h2&gt;
&lt;p&gt;Are you also tired of &lt;strong&gt;finding &amp;amp;&amp;amp; enumerating possibly exploitable SUID binaries&lt;/strong&gt; like me!? Only to miss the ones you were going to &lt;em&gt;escalate your priviliges&lt;/em&gt; with?&lt;/p&gt;
&lt;p&gt;Welp, I just happened to develop a solution: &lt;a href=&#34;https://github.com/Anon-Exploiter/SUID3NUM&#34;&gt;SUID 3NUM&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Self promote, I will! - Yoda)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://umar0x01.sh/img/screenshot_10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;A (not-so-cool-as-it-seems-like) standalone script supporting both &lt;strong&gt;python2&lt;/strong&gt; &amp;amp; &lt;strong&gt;python3&lt;/strong&gt; to find out all SUID binaries in a linux box and do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List all Default SUID Binaries (which ship with linux/aren&amp;rsquo;t exploitable)&lt;/li&gt;
&lt;li&gt;List all Custom Binaries (which don&amp;rsquo;t ship with packages/vanilla installation)&lt;/li&gt;
&lt;li&gt;List all Custom binaries found in GTFO Bin&amp;rsquo;s list (This is where things get interesting)&lt;/li&gt;
&lt;li&gt;Try and auto-exploit found custom SUID binaries which won&amp;rsquo;t impact any of the machine&amp;rsquo;s binaries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;---description-goes-here---&#34;&gt;&amp;lt;!&amp;ndash; Description goes here &amp;ndash;&amp;gt;&lt;/h3&gt;
&lt;p&gt;Many of the times while doing &lt;strong&gt;Vulnhub&lt;/strong&gt;, &lt;strong&gt;HTB&lt;/strong&gt; &amp;amp;&amp;amp; other &lt;strong&gt;vulnerable machines&lt;/strong&gt;, I stumbled upon &lt;em&gt;SUID binaries&lt;/em&gt; in the box, I didn&amp;rsquo;t have any method to seperate exploitable SUID binaries from those default SUID binaries of the system.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a href=&#34;https://github.com/rebootuser/LinEnum&#34;&gt;LinEnum&lt;/a&gt; seperated vulnerable binaries which were present in list of GTFO Bins and presented it nicely in a new section named &lt;code&gt;Interesting SUID Bins&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://umar0x01.sh/img/troll_gifs/awesome.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;awesome-isnt-it&#34;&gt;Awesome, isn&amp;rsquo;t it?&lt;/h4&gt;
&lt;p&gt;By this time, you&amp;rsquo;ll be asking yourself, then why da heck I made this blog post and that script, &lt;strong&gt;If LinEum is so cool!?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;h5 id=&#34;lets-get-on-that-now&#34;&gt;Lets get on that now:&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://umar0x01.sh/img/troll_gifs/finally.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if a binary &lt;strong&gt;isn&amp;rsquo;t&lt;/strong&gt; in GTFO&amp;rsquo;s bins list and is still exploitable?&lt;/li&gt;
&lt;li&gt;What If the sysadmin renamed the exploitable binary (like &lt;em&gt;cp, find, cat, vim, iftop etc.&lt;/em&gt;) to something else?&lt;/li&gt;
&lt;li&gt;What if there&amp;rsquo;s a custom C/C++ compiled binary having SUID bit set on it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;rsquo;ll definitely miss that one binary through which you were going to escalate yourself to the next level. We all know, when LinEnum shows interesting SUID bins list, nobody ever looks at the whole list of the SUID binaries!&lt;/p&gt;
&lt;p&gt;Also, LinEnum and other enumeration scripts only print SUID binaries &amp;amp; GTFO Binaries, they don&amp;rsquo;t seperate default binaries from custom binaries, which lead to severe head banging in walls for 3-4 hours when you can&amp;rsquo;t escalate priviliges :)&lt;/p&gt;
&lt;h5 id=&#34;solution&#34;&gt;Solution:&lt;/h5&gt;
&lt;p&gt;The above issues struck me to create a script which seperates both custom SUID bit-set binaries and default binaries, cross-match custom binaries with GTFO Bin&amp;rsquo;s binaries list. Further, go-ahead, try and auto-exploit them (only in case, they aren&amp;rsquo;t going to &lt;strong&gt;alter any files&lt;/strong&gt; on the system!)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Initializing Script&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python suid3num.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Doing Auto Exploitation of Exploitable SUID binaries&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python suid3num.py -e
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;screenshotsworking&#34;&gt;Screenshots/Working&lt;/h3&gt;
&lt;p&gt;Here are some screenshots describing output of the script:&lt;/p&gt;
&lt;div class=&#34;gallery&#34; data-columns=&#34;3&#34;&gt;
	&lt;img src=&#34;https://umar0x01.sh/img/suidenum/all_bins.png&#34;&gt;
	&lt;img src=&#34;https://umar0x01.sh/img/suidenum/def_binaries.png&#34;&gt;
	&lt;img src=&#34;https://umar0x01.sh/img/suidenum/custom_bins.png&#34;&gt;
	&lt;img src=&#34;https://umar0x01.sh/img/suidenum/suid_bins.png&#34;&gt;
	&lt;img src=&#34;https://umar0x01.sh/img/suidenum/exploitation.png&#34;&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h4 id=&#34;suid-enumeration-without--e&#34;&gt;SUID Enumeration (without -e)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/273928&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/273928.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;auto-exploitation-of-suid-binaries-with--e&#34;&gt;Auto-Exploitation of SUID Binaries (with -e)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/273929&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/273929.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Can I run it on OSCP labs/exam machines?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to some folks, as long as you aren&amp;rsquo;t using &lt;code&gt;-e&lt;/code&gt; flag, its completely fine! Also, I myself used it in mine, so no probs!&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;you-like-it-now-dont-you---ʖ-&#34;&gt;You like it now, don&amp;rsquo;t you? ( ͡° ͜ʖ ͡°)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://umar0x01.sh/img/troll_gifs/hello_pepe.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;future-todos&#34;&gt;Future ToDo(s):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get a Life ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/li&gt;
&lt;li&gt;Make improvements in default SUID binaries list&lt;/li&gt;
&lt;li&gt;Create scripts for &lt;code&gt;linux capabilities&lt;/code&gt; and for binaries one can run with &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;aightimmaheadout&#34;&gt;./aightImmaHeadOut&lt;/h3&gt;
&lt;p&gt;Hope, you like the script, you can find me &lt;a href=&#34;https://twitter.com/syed__umar&#34;&gt;@syed__umar&lt;/a&gt; on twitter!&lt;/p&gt;
&lt;p&gt;See ya, later!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://umar0x01.sh/img/troll_gifs/dissapear.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;script id=&#34;asciicast-343572&#34; src=&#34;https://asciinema.org/a/343572.js&#34; async&gt;&lt;/script&gt;
        
        </description>
    </item>
    
  </channel>
</rss>