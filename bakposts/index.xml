<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BakPosts on Umar_0x01 – Pentester | Programmer | Your average sakurity guy ( ͡~ ͜ʖ ͡°)</title>
    
    
    
    <link>https://umar0x01.sh/bakposts/</link>
    <description>Recent content in BakPosts on Umar_0x01 – Pentester | Programmer | Your average sakurity guy ( ͡~ ͜ʖ ͡°)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://umar0x01.sh/bakposts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyCode Testing</title>
      <link>https://umar0x01.sh/bakposts/pycode-testing/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://umar0x01.sh/bakposts/pycode-testing/</guid>
      <description>
        
          &lt;img src=&#34;https://umar0x01.sh/img/getStatus.png&#34;/&gt;
          
        
        
        &lt;h2 id=&#34;post&#34;&gt;Post&lt;/h2&gt;
&lt;h3 id=&#34;blockquotes&#34;&gt;BlockQuotes&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hello, friend?&amp;rdquo; That&amp;rsquo;s lame.
Maybe I should give you a name&amp;hellip;
But that&amp;rsquo;s a slippery slope.
You&amp;rsquo;re only in my head.
We have to remember that&amp;hellip;
Shit.
It&amp;rsquo;s actually happened.
I&amp;rsquo;m talking to an imaginary person.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;— Mr. Robot S01E01&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;python-code&#34;&gt;Python Code&lt;/h3&gt;
&lt;p&gt;#!/usr/bin/python3&lt;/p&gt;
&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;
For printing the status of both down, up and non-existent hosts/URLs (has no DNS records or the instance/application/server hosting the URL/host went down). Wrote this since I wasn&amp;rsquo;t able to find this functionality in some commonly known open-source scripts. In some cases, one needs the hosts which are down too! (e.g. elasticbeanstalk applications, etc.)&lt;/p&gt;
&lt;p&gt;chmod +x getStatus
sudo mv getStatus /usr/bin/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For fetching URLs/host which are only up
cat urlsList | getStatus&lt;/p&gt;
&lt;p&gt;cat urlsList | getStatus &amp;ndash;down&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note:
The inputted urls shouldn&amp;rsquo;t have http/https appended, the format should only be: &lt;a href=&#34;http://www.google.com&#34;&gt;www.google.com&lt;/a&gt; || google.com
&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;import requests
from bs4 import BeautifulSoup
import sys
import concurrent.futures
import dns.resolver&lt;/p&gt;
&lt;p&gt;cyan 	= &amp;ldquo;\033[0;96m&amp;rdquo;
green 	= &amp;ldquo;\033[0;92m&amp;rdquo;
white 	= &amp;ldquo;\033[0;97m&amp;rdquo;
red 	= &amp;ldquo;\033[0;91m&amp;rdquo;
blue 	= &amp;ldquo;\033[0;94m&amp;rdquo;
yellow 	= &amp;ldquo;\033[0;33m&amp;rdquo;
magenta = &amp;ldquo;\033[0;35m&amp;rdquo;&lt;/p&gt;
&lt;p&gt;def fetchUrls():
userInput 	= sys.stdin
urls 		= []&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for lines in userInput:
	lines 	= lines.strip()
	if lines != &amp;quot;&amp;quot;:
        urls.append(lines)

return(urls)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def returnRequestStatus(url, spacing):
requestTimeout  = 0.5
reqUrl 			= f&amp;quot;http://{url}&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
	response 	= requests.get(reqUrl, timeout=requestTimeout, allow_redirects=True)
	respCode 	= str(response.status_code)
	respText 	= response.text
	respLen 	= str(len(respText))

	try:
        title 	= BeautifulSoup(respText, &#39;html.parser&#39;).find_all(&#39;title&#39;)[0].text.strip()
        print(&amp;quot;{}{:&amp;lt;20}{} | {}{:&amp;lt;20}{} | {}{:&amp;lt;20}{} | {}{:&amp;lt;{}}{} | {}{}{}&amp;quot;.format(yellow, respCode, white,
            magenta, respLen, white,
            green, &amp;quot;UP&amp;quot;, white,
            cyan, url, spacing, white,
            blue, title, white,
        ))

	except IndexError:
        print(&amp;quot;{}{:&amp;lt;20}{} | {}{:&amp;lt;20}{} | {}{:&amp;lt;20}{} | {}{:&amp;lt;{}}{} |&amp;quot;.format(yellow, respCode, white,
            magenta, respLen, white,
            green, &amp;quot;UP&amp;quot;, white,
            cyan, url, spacing, white,
        ))

except requests.exceptions.ConnectionError:
	try:
        if sys.argv[1] != &#39;--down&#39;:
            pass

	except IndexError:
        print(&amp;quot;{}{:&amp;lt;20}{} | {}{:&amp;lt;20}{} | {}{:&amp;lt;20}{} | {}{:&amp;lt;{}}{} |&amp;quot;.format(red, &amp;quot;0&amp;quot;,  white,
            red, &amp;quot;0&amp;quot;, white,
            red, &amp;quot;DOWN&amp;quot;, white,
            red, url, spacing, white,
        ))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def getDNSRecords(host):
answers 	= &amp;quot;&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
	resolver 	= dns.resolver.Resolver()
	resolver.timeout = 1
	resolver.lifetime = 1

	answers 	= resolver.query(host,&#39;CNAME&#39;)[::-1][0].target
	# print(answers)

except dns.resolver.NXDOMAIN: 	# Has no domain records
	answers 	= host
	pass

except dns.resolver.NoAnswer: 	# Has A/other records, not CNAME
	pass

except dns.resolver.NoNameservers: # Wasn&#39;t able to resolve due to some reason
	pass

except dns.exception.Timeout: 	# Timeout in case it can&#39;t reach the server
	pass

return([host, str(answers)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;def main():
processes 		= 50
urls 			= fetchUrls()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hosts 		= []
cnames 		= []

# for url in urls:
# 	getDNSRecords(url)

with concurrent.futures.ProcessPoolExecutor(max_workers=processes) as executor:
	for results in executor.map(getDNSRecords, urls):
        if results[1] != &amp;quot;&amp;quot;:
            hosts.append(results[0])
            cnames.append(results[1])

len1 	= max(len(_len) for _len in hosts) + 8
len2 	= max(len(_len) for _len in cnames) + 8
bar 	= &amp;quot;-&amp;quot; * (len1 + len2)

print(bar)
print(&amp;quot;{:&amp;lt;{}} | {}&amp;quot;.format(&amp;quot;Host&amp;quot;, (len1), &amp;quot;Resolved CNAME Record&amp;quot;))
print(bar)

for host, cname in zip(hosts, cnames):
	print(&amp;quot;{}{:&amp;lt;{}}{} | {}{}&amp;quot;.format(cyan, host, len1, white,
        green, cname + white
	))

print(bar)

print(&amp;quot;\n\n\n\n\n\n\n&amp;quot;)

biggestLength 	= max(len(_len) for _len in cnames) + 8
bar 			= &amp;quot;-&amp;quot; * (80 + biggestLength + 20)
print(bar)
print(&amp;quot;{:&amp;lt;20} | {:&amp;lt;20} | {:&amp;lt;20} | {:&amp;lt;{}} | {}&amp;quot;.format(&amp;quot;Response Code&amp;quot;, &amp;quot;Response Length&amp;quot;, &amp;quot;Status&amp;quot;, &amp;quot;Host&amp;quot;, biggestLength, &amp;quot;Title&amp;quot;))
print(bar)

# for hosts in cnames:
# 	returnRequestStatus(hosts, biggestLength)

with concurrent.futures.ProcessPoolExecutor(max_workers=processes) as executor:
	executor.map(returnRequestStatus, cnames, [biggestLength] * len(cnames))

print(bar)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;lsquo;&lt;strong&gt;main&lt;/strong&gt;&#39;:
main()&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title></title>
      <link>https://umar0x01.sh/bakposts/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://umar0x01.sh/bakposts/test/</guid>
      <description>
        
          
          
          
        
        
        &lt;h1 id=&#34;admin-panel-takeover---i-a-01&#34;&gt;Admin Panel Takeover - I (A-01)&lt;/h1&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;The application is utilizing Laravel (~5) to create/edit/remove posts in a blog type environment. The admin/dev currently doesn&amp;rsquo;t have knowledge to hide something utilizing PHP code and that information could be utilized by an attacker to takeover the Admin Panel and deface/defame/edit the application.&lt;/p&gt;
&lt;p&gt;Also, the challenge isn&amp;rsquo;t to be solved with brute-forcing credentials The difficulty depends upon ones knowledge/skills, solving it could take &lt;em&gt;20 minutes&lt;/em&gt; to &lt;em&gt;2-3&lt;/em&gt; hours.&lt;/p&gt;
&lt;h2 id=&#34;usageinstallation&#34;&gt;Usage/Installation:&lt;/h2&gt;
&lt;p&gt;You can download and run the &lt;a href=&#34;https://docker.com&#34;&gt;docker&lt;/a&gt; image utilizing the following one liner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo docker run -it --rm uexpl0it/admin-panel-takeover
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you can build the docker image using the following &lt;code&gt;DockerFile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM ubuntu:18.04
ENV DEBIAN_FRONTEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;noninteractive

RUN apt-get update
RUN apt-get install -y mysql-server git net-tools php7.2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-fpm &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-common &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-pdo &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-mysqli &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-mbstring &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-xml &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-json &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-phar &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-zip &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-gd &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	php7.2-dom

RUN git clone https://github.com/Anon-Exploiter/adminPanelTakeover /root/adminPanelTakeover
WORKDIR /root/adminPanelTakeover

CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash run.sh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;goal&#34;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;The end goal of the application is to grab the flag in the dashboard after successfully accessing the admin panel. Will try to post the detailed solution with fixes next weekend.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../.gitbook/assets/screenshot_110.png&#34; alt=&#34;Final flag of the machine&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits:&lt;/h2&gt;
&lt;p&gt;Thanks to my colleagues from Ebryx for helping in the beta-testing. Also, the Laravel application&amp;rsquo;s base was cloned from Traversy Media&amp;rsquo;s &lt;a href=&#34;https://github.com/bradtraversy/lsapp&#34;&gt;Github&lt;/a&gt; page.&lt;/p&gt;

        
        </description>
    </item>
    
  </channel>
</rss>